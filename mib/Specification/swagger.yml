openapi: 3.0.1

info:
  title: User Service API
  description: User Microservice of Message in a Bottle Application
  version: 0.2-oas3

servers:
  - url: /

paths:
  /user/{user_id}:
    get:
      tags: [ User ]
      description: Get a user by its id
      operationId: mib.resource.util_fun.get_user
      parameters:
        - name: user_id
          description: User Unique ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Return user
        404:
          description: User not found
        default:
          description: An error occured during retrieving the user
    delete:
      tags: [ User ]
      description: Delete a user by its id
      operationId: mib.resource.util_fun.delete_user
      parameters:
        - name: user_id
          description: User Unique ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        202:
          description: User deleted
        404:
          description: User not found
        default:
          description: An error occured during the deletion the user

  /user_email/{user_email}:
    get:
      tags: [ User ]
      description: Get a user by its email
      operationId: mib.resource.util_fun.get_user_by_email
      parameters:
        - name: user_email
          description: User Unique Email
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Return user
        404:
          description: User not found
        default:
          description: An error occured during retrieving the user
  
  /blacklist_info/{sender_id}/{receiver_id}:
    get:
      tags: [ User ]
      description: Get blacklist info
      operationId: mib.resource.users.blacklist_info
      parameters:
        - name: sender_id
          description: Sender Unique id
          in: path
          required: true
          schema:
            type: string
        - name: receiver_id
          description: Receiver Unique id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Return yes
        202:
          description: blacklist not found

  /user_nickname/{user_nickname}:
    get:
      tags: [ User ]
      description: Get a user by its nickname
      operationId: mib.resource.util_fun.get_user_by_nickname
      parameters:
        - name: user_nickname
          description: User Unique nickname
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Return user
        404:
          description: User not found
        default:
          description: An error occured during retrieving the user

  /authenticate:
    post:
      tags: [ User ]
      summary: login part
      operationId: mib.resource.users.login
      requestBody:
        description: log the user
        required: true
        content:
          application/json:
            schema:
              x-body-name: payload
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@studenti.unipi.it
                password:
                  type: string
                  example: abcd123A
      description: |
        log in the user specified in the payload
      responses:
        '200':
          description: user ok
        '201':
          description: invalid credential

  /create_user:
    post:
      tags: [ User ]
      summary: create
      operationId: mib.resource.users.create_user
      requestBody:
        description: create a new user
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - firstname
                - lastname
                - date_of_birth
                - password
                - nickname
                - location
              properties:
                email:
                  type: string
                  format: email
                  example: user@studenti.unipi.it
                password:
                  type: string
                  example: abcd123A
                firstname:
                  type: string
                lastname:
                  type: string
                date_of_birth:
                  type: string
                nickname:
                  type: string
                location:
                  type: string
      description: |
        register a new user
      responses:
        201:
          description: user created successfully, redirects to users page
        203:
          description: redirects to create_user page (if email is already registered, or nickname is not available)

  #Filippo API
  /show_users:
    post:
      tags: [ User ]
      summary: show users
      operationId: mib.resource.users.show_users
      requestBody:
        description: take in input the id of requester and give the complete list of user
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: string
      description: |
        take in input the id of requester and give the complete list of user
      responses:
        201:
          description: list retrived correctly
        303:
          description: user list not available
  /blacklist:
    post:
      tags: [ User ]
      summary: show users
      operationId: mib.resource.users.add_blacklist
      requestBody:
        description: add user in a blacklist
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id_owner
                - id_to_insert
              properties:
                id_owner:
                  type: string
                id_to_insert:
                  type: string
      description: |
        add user to blacklist
      responses:
        202:
          description: added to blacklist correctly
        303:
          description: user not added
  /delete_blacklist:
    post:
      tags: [ User ]
      summary: remove user from blacklist
      operationId: mib.resource.users.remove_blacklist
      requestBody:
        description: remove user in a blacklist
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id_owner
                - id_to_insert
              properties:
                id_owner:
                  type: string
                id_to_insert:
                  type: string
      description: |
        remove user to blacklist
      responses:
        202:
          description: removed to blacklist correctly
        303:
          description: user not removed

  /reportlist:
    post:
      tags: [ User ]
      summary: report list
      operationId: mib.resource.users.report_list
      requestBody:
        description: report a user
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id_owner
                - id_to_insert
              properties:
                id_owner:
                  type: string
                id_to_insert:
                  type: string
      description: |
        report a user to the admin
      responses:
        202:
          description: user reported correctly
        303:
          description: user not reported

  #Leonardo API
  /profile_filter/{user_id}:
    get:
      tags: [ User ]
      summary: show user filter
      operationId: mib.resource.users.profile_filter
      parameters:
        - name: user_id
          description: user id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        201:
          description: show filter

  /change_filter:
    post:
      tags: [ User ]
      summary: change filter
      operationId: mib.resource.users.change_filter
      requestBody:
        description: change user filter
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - filter
              properties:
                filter:
                  type: string
      description: |
        change user filter
      responses:
        203:
          description: filter update successfully, redirects to profile page
  /change_info:
    post:
      tags: [ User ]
      summary: change info
      operationId: mib.resource.users.change_info
      requestBody:
        description: change user info
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstname:
                  type: string
                lastname:
                  type: string
                date_of_birth:
                  type: string
                new_password:
                  type: string
                old_password:
                  type: string
                location:
                  type: string
      description: |
        change user info
      responses:
        201:
          description: info update successfully, redirects to profile page
        202:
          description: info not updated, wrongo password, redirects to profile page

  /delete_user:
    post:
      tags: [ User ]
      summary: delete
      operationId: mib.resource.users.delete_user
      requestBody:
        description: delete a user
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
              required:
                - user_id
      description: |
        delete a user
      responses:
        201:
          description: password and user_id are valid
        301:
          description: invalid password or user_id, or user not logged.
  /decrease_lottery_points/{user_id}:
    get:
      tags: [ User ]
      description: decrease user lottery points
      operationId: mib.resource.users.decrease_lottery_points
      parameters:
        - name: user_id
          description: User Unique ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: decrease ok
        404:
          description: decrease no
        default:
          description: An error occured during retrieving the user

